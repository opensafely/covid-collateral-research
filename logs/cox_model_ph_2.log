
. cap mkdir ./output/graphs

. 
. /* Page on time_varying splitting: https://stats.stackexchange.com/questions/
> 112555/what-s-wrong-with-this-way-of-fitting-time-dependent-coefficients-in-a
> -cox-regre 
> * For outcomes where axis 0.99
> foreach period in pre pandemic /*wave1 easing1 wave2 easing2 wave3 easing3*/ 
> {
>     use ./output/prep_survival_`period', clear
>     describe
>     foreach outcome in stroke mi hf vte dm_keto depress anx {
>         preserve
>         * Drop events that occur on index date
>         replace `outcome'_admit_date=. if `outcome'_admit_date==index_date
> 
>         * Update study population for diabetes and respiratory outcomes
>         drop if diabetes_subgroup==0 & "`outcome'"== "dm_keto"
>         
>         * Cox model for each outcome category
>         * Generate flags and end dates for each outcome
>         gen `outcome'_admit=(`outcome'_admit_date!=.)
>         tab `outcome'_admit
>         count if `outcome'_admit_date!=.
>         if r(N) > 10 {
>                 gen `outcome'_end = end_date
>                 replace `outcome'_end = `outcome'_admit_date if `outcome'_adm
> it==1
> 
>                 stset `outcome'_end, fail(`outcome'_admit) id(patient_id) ent
> er(index_date) origin(index_date) 
> 
>                 * Kaplan-Meier plot
>                 *sts graph, by(eth5) ylabel(.99(0.01)1) title("`period'") gra
> phregion(fcolor(white))
>                 *graph export ./output/graphs/km_`outcome'_`period'.svg, as(s
> vg) replace
>                 stcox i.eth5, strata(stp) nolog
>                 forvalues z=2/5 {
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(uni_plot_`period'_`outcome'_`z')
>                     }
>                 graph combine uni_plot_`period'_`outcome'_2 uni_plot_`period'
> _`outcome'_3 uni_plot_`period'_`outcome'_4 uni_plot_`period'_`outcome'_5
>                 graph export ./output/graphs/schoenplot_uni_`outcome'_`period
> '.svg, as(svg) replace 
>                 stcox i.eth5 i.age_cat i.male, strata(stp) nolog
>                 forvalues z=2/5 {
>                     di `title'
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(age_sex_plot_`period'_`outcome'_`z')
>                     }
>                 graph combine age_sex_plot_`period'_`outcome'_2 age_sex_plot_
> `period'_`outcome'_3 age_sex_plot_`period'_`outcome'_4 age_sex_plot_`period'_
> `outcome'_5
>                 graph export ./output/graphs/schoenplot_age_sex_`outcome'_`pe
> riod'.svg, as(svg) replace 
>                 *stcox eth5 i.age_cat i.male, strata(stp) tvc(i.age_cat i.mal
> e) texp(_t) nolog
>                 stcox i.eth5 i.age_cat i.male i.urban_rural_bin i.imd i.shiel
> ded, strata(stp) nolog
>                 forvalues z=2/5 {
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(multi_plot_`period'_`outcome'_`z')
>                     }
>                 graph combine multi_plot_`period'_`outcome'_2 multi_plot_`per
> iod'_`outcome'_3 multi_plot_`period'_`outcome'_4 multi_plot_`period'_`outcome
> '_5
>                 graph export ./output/graphs/schoenplot_multi_`outcome'_`peri
> od'.svg, as(svg) replace 
>                 *stcox eth5 i.age_cat i.male i.urban_rural_bin i.imd i.shield
> ed, strata(stp) tvc(i.age_cat i.male i.urban_rural_bin i.imd i.shielded) texp
> (_t)
>         }
>     restore
>     } 
> }
> */
. * T1 DM plots 
. foreach period in pre pandemic /*wave1 easing1 wave2 easing2 wave3 easing3*/ 
> {
  2.     use ./output/prep_survival_`period', clear
  3.     describe
  4.     * Drop events that occur on index date
.     replace t1dm_admit_date=. if t1dm_admit_date==index_date
  5. 
.     * Update study population for diabetes and respiratory outcomes
.     drop if has_t1_diabetes==0
  6. 
.     * Cox model for each outcome category
.     * Generate flags and end dates for each outcome
.     gen t1dm_admit=(t1dm_admit_date!=.)
  7.     tab t1dm_admit
  8.     count if t1dm_admit_date!=.
  9.     if r(N) > 10 {
 10.             gen t1dm_end = end_date
 11.             replace t1dm_end = t1dm_admit_date if t1dm_admit==1
 12. 
.             stset t1dm_end, fail(t1dm_admit) id(patient_id) enter(index_date)
>  origin(index_date) 
 13.             * Kaplan-Meier plot
.             *sts graph, by(eth5) ylabel(.80(.05)1) title("`period'") graphreg
> ion(fcolor(white))
.             *graph export ./output/graphs/km_t1dm_`period'.svg, as(svg) repla
> ce
.             stcox i.eth5, strata(stp) nolog
 14.                 forvalues z=2/5 {
 15.                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(uni_plot_t1dm_`z')
 16.                     }
 17.                 graph combine uni_plot_t1dm_2 uni_plot_t1dm_3 uni_plot_t1d
> m_4 uni_plot_t1dm_5
 18.                 graph export ./output/graphs/schoenplot_uni_t1dm_`period'.
> svg, as(svg) replace 
 19.                 stcox i.eth5 i.age_cat i.male, strata(stp) nolog
 20.                 forvalues z=2/5 {
 21.                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(age_sex_plot_t1dm_`z')
 22.                     }
 23.                 graph combine age_sex_plot_t1dm_2 age_sex_plot_t1dm_3 age_
> sex_plot_t1dm_4 age_sex_plot_t1dm_5
 24.                 graph export ./output/graphs/schoenplot_age_sex_t1dm_`peri
> od'.svg, as(svg) replace 
 25.                 *stcox eth5 i.age_cat i.male, strata(stp) tvc(i.age_cat i.
> male) texp(_t) nolog
.                 stcox i.eth5 i.age_cat i.male i.urban_rural_bin i.imd i.shiel
> ded, strata(stp) nolog
 26.                 forvalues z=2/5 {
 27.                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(multi_plot_t1dm_`z')
 28.                     }
 29.                 graph combine multi_plot_t1dm_2 multi_plot_t1dm_3 multi_pl
> ot_t1dm_4 multi_plot_t1dm_5
 30.                 graph export ./output/graphs/schoenplot_multi_t1dm_`period
> '.svg, as(svg) replace 
 31.             *stcox eth5 i.age_cat i.male i.urban_rural_bin i.imd i.shielde
> d, strata(stp) tvc(i.age_cat i.male i.urban_rural_bin i.imd i.shielded) texp(
> _t)
.     }
 32. } 

Contains data from ./output/prep_survival_pre.dta
  obs:         1,000                          
 vars:            46                          16 May 2023 10:11
-------------------------------------------------------------------------------
              storage   display    value
variable name   type    format     label      variable label
-------------------------------------------------------------------------------
self_harm_pri~n str10   %10s                  
stp             str4    %9s                   
age             int     %8.0g                 
ethnicity       byte    %8.0g                 
has_msoa        byte    %8.0g                 
imd             byte    %8.0g                 
shielded        byte    %8.0g                 
has_t1_diabetes byte    %8.0g                 
has_t2_diabetes byte    %8.0g                 
diabetes_subg~p byte    %8.0g                 
cvd_subgroup    byte    %8.0g                 
has_asthma      byte    %8.0g                 
has_copd        byte    %8.0g                 
resp_subgroup   byte    %8.0g                 
mh_subgroup     byte    %8.0g                 
urban_rural     byte    %8.0g                 
patient_id      int     %8.0g                 
dereg_dateA     float   %dD/N/CY              
mi_admit_date   float   %dD/N/CY              
stroke_admit_~e float   %dD/N/CY              
hf_admit_date   float   %dD/N/CY              
vte_admit_date  float   %dD/N/CY              
t1dm_admit_date float   %dD/N/CY              
t2dm_admit_date float   %dD/N/CY              
dm_keto_admit~e float   %dD/N/CY              
asthma_admit_~e float   %dD/N/CY              
depress_admit~e float   %dD/N/CY              
anx_admit_date  float   %dD/N/CY              
smi_admit_date  float   %dD/N/CY              
cvd_admit_date  float   %dD/N/CY              
dm_admit_date   float   %dD/N/CY              
copd_admit_date float   %dD/N/CY              
mh_admit_date   float   %dD/N/CY              
date_died       float   %dD/N/CY              
lrti_admit_date float   %dD/N/CY              
copd_any_date   float   %dD/N/CY              
lrti_copd       float   %9.0g                 
index_date      float   %dD/N/CY              
end_study       float   %dD/N/CY              
end_date        float   %dD/N/CY              
eth5            float   %11.0g     eth5       
male            float   %9.0g      male       
region          float   %24.0g     region     region of England
urban_rural_5   float   %27.0g     urban_rural_5
                                              Rural Urban in five categories
urban_rural_bin float   %9.0g      urban_rural_bin
                                              Rural-Urban
age_cat         float   %13.0g     age        
-------------------------------------------------------------------------------
Sorted by: 
(0 real changes made)
(800 observations deleted)

 t1dm_admit |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        198       99.00       99.00
          1 |          2        1.00      100.00
------------+-----------------------------------
      Total |        200      100.00
  2

Contains data from ./output/prep_survival_pandemic.dta
  obs:         1,000                          
 vars:            46                          16 May 2023 10:11
-------------------------------------------------------------------------------
              storage   display    value
variable name   type    format     label      variable label
-------------------------------------------------------------------------------
self_harm_pri~n str10   %10s                  
stp             str4    %9s                   
age             int     %8.0g                 
ethnicity       byte    %8.0g                 
has_msoa        byte    %8.0g                 
imd             byte    %8.0g                 
shielded        byte    %8.0g                 
has_t1_diabetes byte    %8.0g                 
has_t2_diabetes byte    %8.0g                 
diabetes_subg~p byte    %8.0g                 
cvd_subgroup    byte    %8.0g                 
has_asthma      byte    %8.0g                 
has_copd        byte    %8.0g                 
resp_subgroup   byte    %8.0g                 
mh_subgroup     byte    %8.0g                 
urban_rural     byte    %8.0g                 
patient_id      int     %8.0g                 
dereg_dateA     float   %dD/N/CY              
mi_admit_date   float   %dD/N/CY              
stroke_admit_~e float   %dD/N/CY              
hf_admit_date   float   %dD/N/CY              
vte_admit_date  float   %dD/N/CY              
t1dm_admit_date float   %dD/N/CY              
t2dm_admit_date float   %dD/N/CY              
dm_keto_admit~e float   %dD/N/CY              
asthma_admit_~e float   %dD/N/CY              
depress_admit~e float   %dD/N/CY              
anx_admit_date  float   %dD/N/CY              
smi_admit_date  float   %dD/N/CY              
cvd_admit_date  float   %dD/N/CY              
dm_admit_date   float   %dD/N/CY              
copd_admit_date float   %dD/N/CY              
mh_admit_date   float   %dD/N/CY              
date_died       float   %dD/N/CY              
lrti_admit_date float   %dD/N/CY              
copd_any_date   float   %dD/N/CY              
lrti_copd       float   %9.0g                 
index_date      float   %dD/N/CY              
end_study       float   %dD/N/CY              
end_date        float   %dD/N/CY              
eth5            float   %11.0g     eth5       
male            float   %9.0g      male       
region          float   %24.0g     region     region of England
urban_rural_5   float   %27.0g     urban_rural_5
                                              Rural Urban in five categories
urban_rural_bin float   %9.0g      urban_rural_bin
                                              Rural-Urban
age_cat         float   %13.0g     age        
-------------------------------------------------------------------------------
Sorted by: 
(0 real changes made)
(800 observations deleted)

 t1dm_admit |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        194       97.00       97.00
          1 |          6        3.00      100.00
------------+-----------------------------------
      Total |        200      100.00
  6

. 
. /* T2 DM and asthma plots 
> foreach period in pre pandemic /*wave1 easing1 wave2 easing2 wave3 easing3*/ 
> {
>     use ./output/prep_survival_`period', clear
>     describe
>     foreach outcome in asthma t2dm {
>     preserve
>     * Drop events that occur on index date
>         replace `outcome'_admit_date=. if `outcome'_admit_date==index_date 
> 
>         * Update study population for diabetes and respiratory outcomes
>         drop if has_t2_diabetes==0 & "`outcome'"== "t2dm"
>         drop if has_asthma==0 & "`outcome'"== "asthma"
> 
>         * Cox model for each outcome category
>         * Generate flags and end dates for each outcome
>         gen `outcome'_admit=(`outcome'_admit_date!=.)
>         tab `outcome'_admit
>         count if `outcome'_admit_date!=.
>         if r(N) > 10 {
>                 gen `outcome'_end = end_date
>                 replace `outcome'_end = `outcome'_admit_date if `outcome'_adm
> it==1
> 
>                 stset `outcome'_end, fail(`outcome'_admit) id(patient_id) ent
> er(index_date) origin(index_date) 
>                 * Kaplan-Meier plot
>                 *sts graph, by(eth5) ylabel(.95(.01)1) title("`period'") grap
> hregion(fcolor(white))
>                 *graph export ./output/graphs/km_`outcome'_`period'.svg, as(s
> vg) replace
>                 stcox i.eth5, strata(stp) nolog
>                 forvalues z=2/5 {
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(uni_plot_`period'_`outcome'_`z')
>                     }
>                 graph combine uni_plot_`period'_`outcome'_2 uni_plot_`period'
> _`outcome'_3 uni_plot_`period'_`outcome'_4 uni_plot_`period'_`outcome'_5
>                 graph export ./output/graphs/schoenplot_uni_`outcome'_`period
> '.svg, as(svg) replace 
>                 stcox i.eth5 i.age_cat i.male, strata(stp) nolog
>                 forvalues z=2/5 {
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(age_sex_plot_`period'_`outcome'_`z')
>                     }
>                 graph combine age_sex_plot_`period'_`outcome'_2 age_sex_plot_
> `period'_`outcome'_3 age_sex_plot_`period'_`outcome'_4 age_sex_plot_`period'_
> `outcome'_5
>                 graph export ./output/graphs/schoenplot_age_sex_`outcome'_`pe
> riod'.svg, as(svg) replace 
>                 *stcox eth5 i.age_cat i.male, strata(stp) tvc(i.age_cat i.mal
> e) texp(_t) nolog
>                 stcox i.eth5 i.age_cat i.male i.urban_rural_bin i.imd i.shiel
> ded, strata(stp) nolog
>                 forvalues z=2/5 {
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(multi_plot_`period'_`outcome'_`z')
>                     }
>                 graph combine multi_plot_`period'_`outcome'_2 multi_plot_`per
> iod'_`outcome'_3 multi_plot_`period'_`outcome'_4 multi_plot_`period'_`outcome
> '_5
>                 graph export ./output/graphs/schoenplot_multi_`outcome'_`peri
> od'.svg, as(svg) replace 
>                 *stcox eth5 i.age_cat i.male i.urban_rural_bin i.imd i.shield
> ed, strata(stp) tvc(i.age_cat i.male i.urban_rural_bin i.imd i.shielded) texp
> (_t)
>         }
>     restore
>     } 
> }
> 
> * COPD plots
> foreach period in pre pandemic /*wave1 easing1 wave2 easing2 wave3 easing3*/ 
> {
>     use ./output/prep_survival_`period', clear
>     describe
>     * Drop events that occur on index date
>      replace copd_admit_date=. if copd_admit_date==index_date
> 
>     * Update study population for diabetes and respiratory outcomes
>     drop if has_copd==0
> 
>     * Cox model for each outcome category
>     * Generate flags and end dates for each outcome
>     gen copd_admit=(copd_admit_date!=.)
>     tab copd_admit
>     count if copd_admit_date!=.
>     if r(N) > 10 {
>             gen copd_end = end_date
>             replace copd_end = copd_admit_date if copd_admit==1
> 
>             stset copd_end, fail(copd_admit) id(patient_id) enter(index_date)
>  origin(index_date) 
>             * Kaplan-Meier plot
>             sts graph, by(eth5) ylabel(.90(.02)1) title("`period'") graphregi
> on(fcolor(white))
>             graph export ./output/graphs/km_copd_`period'.svg, as(svg) replac
> e
>             stcox i.eth5, strata(stp) nolog
>                 forvalues z=2/5 {
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(uni_plot_copd_`z')
>                     }
>                 graph combine uni_plot_copd_2 uni_plot_copd_3 uni_plot_copd_4
>  uni_plot_copd_5
>                 graph export ./output/graphs/schoenplot_uni_copd_`period'.svg
> , as(svg) replace 
>                 stcox i.eth5 i.age_cat i.male, strata(stp) nolog
>                 forvalues z=2/5 {
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(age_sex_plot_copd_`z')
>                     }
>                 graph combine age_sex_plot_copd_2 age_sex_plot_copd_3 age_sex
> _plot_copd_4 age_sex_plot_copd_5
>                 graph export ./output/graphs/schoenplot_age_sex_copd.svg, as(
> svg) replace 
>                 *stcox eth5 i.age_cat i.male, strata(stp) tvc(i.age_cat i.mal
> e) texp(_t) nolog
>                 stcox i.eth5 i.age_cat i.male i.urban_rural_bin i.imd i.shiel
> ded, strata(stp) nolog
>                 forvalues z=2/5 {
>                     estat phtest, plot(`z'.eth5) ///
>                         graphregion(fcolor(white)) ///
>                         ylabel(, nogrid labsize(small)) ///
>                         xlabel(, labsize(small)) ///
>                         xtitle("Time", size(small)) ///
>                         ytitle("Scaled Schoenfeld Residuals", size(small)) //
> /
>                         msize(small) ///
>                         mcolor(gs6) ///
>                         msymbol(circle_hollow) ///
>                         scheme(s1mono) ///
>                         title ("`z'", position(11) size(medsmall)) ///
>                         name(multi_plot_copd_`z')
>                     }
>                 graph combine multi_plot_copd_2 multi_plot_copd_3 multi_plot_
> copd_4 multi_plot_copd_5
>                 graph export ./output/graphs/schoenplot_multi_copd_`period'.s
> vg, as(svg) replace 
>             stcox eth5 i.age_cat i.male i.urban_rural_bin i.imd i.shielded, s
> trata(stp) tvc(i.age_cat i.male i.urban_rural_bin i.imd i.shielded) texp(_t)
>     }
> } 
> /*foreach period in pre pandemic {
> use ./output/prep_survival_`period', clear
>     describe
>     * Drop events that occur on index date
>     replace t1dm_admit_date=. if t1dm_admit_date==index_date
> 
>     * Update study population for diabetes outcomes
>     preserve
>     drop if has_t1_diabetes==0
> 
>     * Cox model for each outcome category
>     * Generate flags and end dates for each outcome
>     gen t1dm_admit=(t1dm_admit_date!=.)
>     tab t1dm_admit
>     count if t1dm_admit_date!=.
>     
>     gen t1dm_end = end_date
>     replace t1dm_end = t1dm_admit_date if t1dm_admit==1
> 
>     stset t1dm_end, fail(t1dm_admit) id(patient_id) enter(index_date) origin(
> index_date) 
> 
>     bys t1dm_end eth5: egen t1dm_tot_events_date = total(_d)
>     bys t1dm_end eth5: gen t1dm_tot_end = _N 
> 
>     bys eth5: sum t1dm_tot_events_date, d
>     bys eth5: sum t1dm_tot_end, d
>     count if t1dm_tot_events_date<=5
>     count if t1dm_tot_end<=5
> 
>     restore 
> 
>     replace anx_admit_date=. if anx_admit_date==index_date
> 
>         
>     * Cox model for each outcome category
>     * Generate flags and end dates for each outcome
>     gen anx_admit=(anx_admit_date!=.)
>     tab anx_admit
>     count if `outcome'_admit_date!=.
>     gen anx_end = end_date
>     replace anx_end = anx_admit_date if anx_admit==1
>     stset anx_end, fail(anx_admit) id(patient_id) enter(index_date) origin(in
> dex_date) 
>             
>     bys anx_end eth5: egen anx_tot_events_date = total(_d)
>     bys anx_end eth5: gen anx_tot_end = _N 
> 
>     bys eth5: sum anx_tot_events_date, d
>     bys eth5: sum anx_tot_end, d
>     count if anx_tot_events_date<=5
>     count if anx_tot_end<=5
> 
> }*/

end of do-file

. . file open output using "/tmp/305_cox_ph.do.cQZk.out", write text replace

. . file write output "success" 

. . file close output

. 
end of do-file


