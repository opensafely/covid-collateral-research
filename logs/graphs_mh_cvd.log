
. cap mkdir ./output/collapsed

. cap mkdir ./output/graphs

. 
. * Generates graphs for clinical monitoring measures
. foreach this_group in cvd /*mh*/ {
  2. * Ethnicity
.         import delimited using ./output/measures/`this_group'/measure_bp_meas
> _`this_group'_ethnicity_rate.csv, numericcols(4) clear
  3.         * Shouldn't be missing on server but is in dummy data
.         count if ethnicity==.
  4.         * Drop missings as not required
.         drop if ethnicity==0 | ethnicity==.
  5.         * Generate rate per 100,000
.         gen rate = value*100000 
  6.         * Format date
.         gen dateA = date(date, "YMD")
  7.         drop date
  8.         format dateA %dD/M/Y
  9.         * reshape dataset so columns with rates for each ethnicity 
.         reshape wide value rate `this_group'_subgroup bp_meas, i(dateA) j(eth
> nicity)
 10.         describe
 11.         * Labelling ethnicity variables
.         label var rate1 "White"
 12.         label var rate2 "Mixed"
 13.         label var rate3 "Asian"
 14.         label var rate4 "Black"
 15.         label var rate5 "Other"
 16. 
.         * Generate line graph
.         graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan201
> 8(120)01Apr2022, angle(45) ///
>         format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Dat
> e") ylabel(#5, labsize(small) ///
>         angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) legend(row(1) size(s
> mall) ///
>         title("Ethnic categories", size(small))) graphregion(fcolor(white))
 17. 
.         graph export ./output/graphs/line_`this_group'_bp_ethnic.svg, as(svg)
>  replace
 18.     /* IMD
>     clear 
>     import delimited using ./output/measures/`this_group'/measure_bp_meas_`th
> is_group'_imd_rate.csv, numericcols(4)
>     * IMD should not have missings as . on server but could be in dummy data
>     count if imd==.
>     * Drop missings
>     drop if imd==. | imd==0
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_subgroup bp_meas, i(dateA) j(imd)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "IMD - 1"
>     label var rate2 "IMD - 2"
>     label var rate3 "IMD - 3"
>     label var rate4 "IMD - 4"
>     label var rate5 "IMD - 5"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(12
> 0)01Apr2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(#5, labsize(small) ///
>     angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) legend(row(1) size(small
> ) ///
>     title("IMD categories", size(small))) graphregion(fcolor(white))
> 
>     graph export ./output/graphs/line_`this_group'_bp_imd.svg, as(svg) replac
> e
>     */
.     }
(5 vars, 300 obs)
  50
(50 observations deleted)
(89 missing values generated)
(note: j = 1 2 3 4 5)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      250   ->      50
Number of variables                   6   ->      21
j variable (5 values)         ethnicity   ->   (dropped)
xij variables:
                                  value   ->   value1 value2 ... value5
                                   rate   ->   rate1 rate2 ... rate5
                           cvd_subgroup   ->   cvd_subgroup1 cvd_subgroup2 ... 
> cvd_subgroup5
                                bp_meas   ->   bp_meas1 bp_meas2 ... bp_meas5
-----------------------------------------------------------------------------

Contains data
  obs:            50                          
 vars:            21                          
-------------------------------------------------------------------------------
              storage   display    value
variable name   type    format     label      variable label
-------------------------------------------------------------------------------
dateA           float   %dD/M/Y               
bp_meas1        byte    %8.0g                 1 bp_meas
cvd_subgroup1   byte    %8.0g                 1 cvd_subgroup
value1          float   %8.0g                 1 value
rate1           float   %9.0g                 1 rate
bp_meas2        byte    %8.0g                 2 bp_meas
cvd_subgroup2   byte    %8.0g                 2 cvd_subgroup
value2          float   %8.0g                 2 value
rate2           float   %9.0g                 2 rate
bp_meas3        byte    %8.0g                 3 bp_meas
cvd_subgroup3   byte    %8.0g                 3 cvd_subgroup
value3          float   %8.0g                 3 value
rate3           float   %9.0g                 3 rate
bp_meas4        byte    %8.0g                 4 bp_meas
cvd_subgroup4   byte    %8.0g                 4 cvd_subgroup
value4          float   %8.0g                 4 value
rate4           float   %9.0g                 4 rate
bp_meas5        byte    %8.0g                 5 bp_meas
cvd_subgroup5   byte    %8.0g                 5 cvd_subgroup
value5          float   %8.0g                 5 value
rate5           float   %9.0g                 5 rate
-------------------------------------------------------------------------------
Sorted by: dateA
(note: file ./output/graphs/line_cvd_bp_ethnic.svg not found)
(file ./output/graphs/line_cvd_bp_ethnic.svg written in SVG format)

. 
. /* Hospital admission graphs
> local groups "mi stroke heart_failure vte"
> forvalues i=1/4 {
>     local this_group :word `i' of `groups'
> * Ethnicity
>     clear 
>     import delimited using ./output/measures/cvd/measure_`this_group'_admissi
> on_ethnicity_rate.csv, numericcols(4)
>      * Shouldn't be missing on server but is in dummy data
>     count if ethnicity==.
>     * Drop missings as not required
>     drop if ethnicity==0 | ethnicity==.
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_admission population, i(dateA) j(eth
> nicity)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "White"
>     label var rate2 "Mixed"
>     label var rate3 "Asian"
>     label var rate4 "Black"
>     label var rate5 "Other"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(12
> 0)01Apr2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(#5, labsize(small) ///
>     angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) legend(row(1) size(small
> ) ///
>     title("Ethnic categories", size(small))) graphregion(fcolor(white))
> 
>     graph export ./output/graphs/line_`this_group'_admission_ethnicity.svg, a
> s(svg) replace
>     * IMD
>     clear 
>     import delimited using ./output/measures/cvd/measure_`this_group'_admissi
> on_imd_rate.csv, numericcols(4)
>     * IMD should not have missings as . on server but could be in dummy data
>     count if imd==.
>     * Drop missings
>     drop if imd==. | imd==0
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_admission population, i(dateA) j(imd
> )
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "IMD - 1"
>     label var rate2 "IMD - 2"
>     label var rate3 "IMD - 3"
>     label var rate4 "IMD - 4"
>     label var rate5 "IMD - 5"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(12
> 0)01Apr2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(#5, labsize(small) ///
>     angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) legend(row(1) size(small
> ) ///
>     title("IMD categories", size(small))) graphregion(fcolor(white))
> 
>     graph export ./output/graphs/line_`this_group'_admission_imd.svg, as(svg)
>  replace
> 
> }
> local groups "depression anxiety smi self_harm eating_dis ocd"
> forvalues i=1/6 {
>     local this_group :word `i' of `groups'
> * Ethnicity
>     clear 
>     import delimited using ./output/measures/mh/measure_`this_group'_admissio
> n_ethnicity_rate.csv, numericcols(4)
>      * Shouldn't be missing on server but is in dummy data
>     count if ethnicity==.
>     * Drop missings as not required
>     drop if ethnicity==0 | ethnicity==.
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_admission population, i(dateA) j(eth
> nicity)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "White"
>     label var rate2 "Mixed"
>     label var rate3 "Asian"
>     label var rate4 "Black"
>     label var rate5 "Other"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(12
> 0)01Apr2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(#5, labsize(small) ///
>     angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) legend(row(1) size(small
> ) ///
>     title("Ethnic categories", size(small))) graphregion(fcolor(white))
> 
>     graph export ./output/graphs/line_`this_group'_admission_ethnicity.svg, a
> s(svg) replace
>     * IMD
>     clear 
>     import delimited using ./output/measures/mh/measure_`this_group'_admissio
> n_imd_rate.csv, numericcols(4)
>     * IMD should not have missings as . on server but could be in dummy data
>     count if imd==.
>     * Drop missings
>     drop if imd==. | imd==0
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_admission population, i(dateA) j(imd
> )
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "IMD - 1"
>     label var rate2 "IMD - 2"
>     label var rate3 "IMD - 3"
>     label var rate4 "IMD - 4"
>     label var rate5 "IMD - 5"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(12
> 0)01Apr2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(#5, labsize(small) ///
>     angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) legend(row(1) size(small
> ) ///
>     title("IMD categories", size(small))) graphregion(fcolor(white))
> 
>     graph export ./output/graphs/line_`this_group'_admission_imd.svg, as(svg)
>  replace
> 
> }
> */
. /* Hospital admissions - primary diagnosis CVD
> local groups "mi stroke heart_failure vte"
> forvalues i=1/4 {
>     local this_group :word `i' of `groups'
> * Ethnicity
>     clear 
>     import delimited using ./output/measures/cvd/measure_`this_group'_primary
> _admission_ethnicity_rate.csv, numericcols(4)
>      * Shouldn't be missing on server but is in dummy data
>     count if ethnicity==.
>     * Drop missings as not required
>     drop if ethnicity==0 | ethnicity==.
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_primary_admission population, i(date
> A) j(ethnicity)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "White"
>     label var rate2 "Mixed"
>     label var rate3 "Asian"
>     label var rate4 "Black"
>     label var rate5 "Other"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(12
> 0)01Apr2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(#5, labsize(small) ///
>     angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) legend(row(1) size(small
> ) ///
>     title("Ethnic categories", size(small))) graphregion(fcolor(white))
> 
>     graph export ./output/graphs/line_cvd_`this_group'_primary_admission_ethn
> icity.svg, as(svg) replace
>     * IMD
>     clear 
>     import delimited using ./output/measures/cvd/measure_`this_group'_primary
> _admission_imd_rate.csv, numericcols(4)
>     * IMD should not have missings as . on server but could be in dummy data
>     count if imd==.
>     * Drop missings
>     drop if imd==. | imd==0
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_primary_admission population, i(date
> A) j(imd)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "IMD - 1"
>     label var rate2 "IMD - 2"
>     label var rate3 "IMD - 3"
>     label var rate4 "IMD - 4"
>     label var rate5 "IMD - 5"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(12
> 0)01Apr2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(#5, labsize(small) ///
>     angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) legend(row(1) size(small
> ) ///
>     title("IMD categories", size(small))) graphregion(fcolor(white))
> 
>     graph export ./output/graphs/line_cvd_`this_group'_primary_admission_imd.
> svg, as(svg) replace
> 
> }
> /* Mental health measures - 3 monthly rates for primary admissions
> local groups "depression anxiety smi self_harm eating_dis ocd"
> forvalues i=1/6 {
>     local this_group :word `i' of `groups'
> * Ethnicity
>     clear 
>     import delimited using ./output/measures/measure_`this_group'_primary_adm
> ission_ethnicity_rate.csv, numericcols(4)
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * Collapse at 3 monthly intervals
>     gen quarter = qofd(dateA)
>     collapse (sum) value rate `this_group'_primary_admission population (min)
>  dateA,  by(quarter ethnicity)
>     drop quarter
>     * Outputing file 
>     export delimited using ./output/collapsed/collapse_measure_`this_group'_p
> rimary_admission_ethnicity_rate.csv
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_primary_admission population, i(date
> A) j(ethnicity)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "White"
>     label var rate2 "Mixed"
>     label var rate3 "Asian"
>     label var rate4 "Black"
>     label var rate5 "Other"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(18
> 0)01Jan2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(, labsize(small) ///
>     angle(0)) yscale(titlegap(*10)) xmtick(##6) legend(row(1) size(small) tit
> le("Ethnic categories", size(small))) 
> 
>     graph export ./output/graphs/line_`this_group'_primary_admission_ethnicit
> y.svg, as(svg) replace
>     
>     * IMD
>     clear 
>     import delimited using ./output/measures/measure_`this_group'_primary_adm
> ission_imd_rate.csv, numericcols(4)
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * Collapse at 3 monthly intervals
>     gen quarter = qofd(dateA)
>     collapse (sum) value rate `this_group'_primary_admission population (min)
>  dateA,  by(quarter imd)
>     drop quarter
>     * Outputing file 
>     export delimited using ./output/collapsed/collapse_measure_`this_group'_p
> rimary_admission_imd_rate.csv
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_primary_admission population, i(date
> A) j(imd)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "IMD - 1"
>     label var rate2 "IMD - 2"
>     label var rate3 "IMD - 3"
>     label var rate4 "IMD - 4"
>     label var rate5 "IMD - 5"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(18
> 0)01Jan2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(, labsize(small) ///
>     angle(0)) yscale(titlegap(*10)) xmtick(##6) legend(row(1) size(small) tit
> le("IMD categories", size(small))) 
> 
>     graph export ./output/graphs/line_`this_group'_primary_admission_imd.svg,
>  as(svg) replace
> 
> }
> */
> /* Emergency admissions - small numbers for eating disorders and ocd so those
>  not included
> local groups "anxiety smi self_harm"
> forvalues i=1/3 {
>     local this_group :word `i' of `groups'
> * Ethnicity
>     clear 
>     import delimited using ./output/measures/mh/measure_`this_group'_emergenc
> y_ethnicity_rate.csv, numericcols(4)
>      * Shouldn't be missing on server but is in dummy data
>     count if ethnicity==.
>     * Drop missings as not required
>     drop if ethnicity==0 | ethnicity==.
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_emergency population, i(dateA) j(eth
> nicity)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "White"
>     label var rate2 "Mixed"
>     label var rate3 "Asian"
>     label var rate4 "Black"
>     label var rate5 "Other"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(18
> 0)01Jan2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(, labsize(small) ///
>     angle(0)) yscale(titlegap(*10)) xmtick(##6) legend(row(1) size(small) tit
> le("Ethnic categories", size(small))) 
> 
>     graph export ./output/graphs/line_`this_group'_emergency_ethnicity.svg, a
> s(svg) replace
>     * IMD
>     clear 
>     import delimited using ./output/measures/mh/measure_`this_group'_emergenc
> y_imd_rate.csv, numericcols(4)
>     * IMD should not have missings as . on server but could be in dummy data
>     count if imd==.
>     * Drop missings
>     drop if imd==. | imd==0
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate `this_group'_emergency population, i(dateA) j(imd
> )
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "IMD - 1"
>     label var rate2 "IMD - 2"
>     label var rate3 "IMD - 3"
>     label var rate4 "IMD - 4"
>     label var rate5 "IMD - 5"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(18
> 0)01Jan2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(, labsize(small) ///
>     angle(0)) yscale(titlegap(*10)) xmtick(##6) legend(row(1) size(small) tit
> le("IMD categories", size(small))) 
> 
>     graph export ./output/graphs/line_`this_group'_emergency_imd.svg, as(svg)
>  replace
> 
> }
> 
> /*local outcomes "systolic_bp"
> local strata "monitoring exacerbation"
> local other "review exacerbation"
> forvalues i=1/2 {
>     local this_outcome :word `i' of `outcomes'
>     forvalues j=1/2 {
>         local this_strata :word `j' of `strata'
>         local this_other :word `j' of `other'
>     * Ethnicity
>     clear 
>     import delimited using "./output/measures/measure_`this_outcome'_`this_st
> rata'_ethnicity_rate.csv"
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate has_`this_outcome' `this_outcome'_`this_other', i
> (dateA) j(ethnicity)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "White"
>     label var rate2 "Mixed"
>     label var rate3 "Asian"
>     label var rate4 "Black"
>     label var rate5 "Other"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(18
> 0)01Jan2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(, labsize(small) ///
>     angle(0)) yscale(titlegap(*10)) xmtick(##6) legend(row(1) size(small) tit
> le("Ethnic categories", size(small))) 
> 
>     graph export ./output/graphs/line_resp_ethnic_`this_outcome'_`this_strata
> '.svg, as(svg) replace
>     * IMD
>     clear 
>     import delimited using "./output/measures/resp/measure_`this_outcome'_`th
> is_strata'_imd_rate.csv"
>     * Generate rate per 100,000
>     gen rate = value*100000 
>     * Format date
>     gen dateA = date(date, "YMD")
>     drop date
>     format dateA %dD/M/Y
>     tab dateA 
>     * reshape dataset so columns with rates for each ethnicity 
>     reshape wide value rate has_`this_outcome' `this_outcome'_`this_other', i
> (dateA) j(imd)
>     describe
>     * Labelling ethnicity variables
>     label var rate1 "IMD - 1"
>     label var rate2 "IMD - 2"
>     label var rate3 "IMD - 3"
>     label var rate4 "IMD - 4"
>     label var rate5 "IMD - 5"
> 
>     * Generate line graph
>     graph twoway line rate1 rate2 rate3 rate4 rate5 date, tlabel(01Jan2018(18
> 0)01Jan2022, angle(45) ///
>     format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") 
> ylabel(, labsize(small) ///
>     angle(0)) yscale(titlegap(*10)) xmtick(##6) legend(row(1) size(small) tit
> le("IMD categories", size(small)))
> 
>     graph export ./output/graphs/line_resp_imd_`this_outcome'_`this_strata'.s
> vg, as(svg) replace
>     }
> }
> */
> */
> */
. 
. log close
      name:  <unnamed>
       log:  /workspace/logs/graphs_mh_cvd.log
  log type:  text
 closed on:  12 Sep 2022, 08:28:47
-------------------------------------------------------------------------------
