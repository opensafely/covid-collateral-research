
. cap mkdir ./output/time_series

. 
. * Mental health outcomes
. * Clinical monitoring: BP measurement
. * Hospital admissions: any code and primary code for depression, anxiety, smi
> , self harm, eating disorders, OCD
. * Likely to need to update file paths as ethnicity 3-monthly
. local a "bp_meas_mh /*depression_admission anxiety_admission smi_admission se
> lf_harm_admission eating_dis_admission ocd_admission*/" 

. local z "bp_mh /*depress_admit anx_admit smi_admit sh_admit eat_dis_admit ocd
> _admit*/"

. forvalues i=1/1 {
  2.     local c: word `i' of `a' 
  3.         local e: word `i' of `z'
  4.         local b "ethnicity imd"
  5.         forvalues i=1/2 {
  6.         local d: word `i' of `b'
  7.                 import delimited "./output/measures/mh/measure_`c'_`d'_rat
> e.csv", numericcols(4) clear  //get csv
  8.                 drop if `d'==0 | `d'==.
  9.         drop if mh_subgroup==0
 10.                 gen temp_date=date(date, "YMD")
 11.                 format temp_date %td
 12.                 gen postcovid=(temp_date>=date("23/03/2020", "DMY"))
 13.                 gen month=mofd(temp_date)
 14.                 format month %tm
 15.                 drop temp_date
 16.                 *Value to rate per 100k
.                 gen rate = value*100000
 17.                 label variable rate "Rate of `c' per 100,000"
 18.                 *Set time series
.                 tsset `d' month 
 19.                 *Kernel density plots to check for normality and extreme v
> alues
.                 kdensity rate if `d'==1, normal name(kd_`d'_1_`e')
 20.                 kdensity rate if `d'==2, normal name(kd_`d'_2_`e')
 21.                 kdensity rate if `d'==3, normal name(kd_`d'_3_`e')
 22.                 kdensity rate if `d'==4, normal name(kd_`d'_4_`e')
 23.                 kdensity rate if `d'==5, normal name(kd_`d'_5_`e')
 24.                 *Autoregression plots by ethnicity
.                 ac rate if `d'==1, name(ac_`d'_1_`e')
 25.                 ac rate if `d'==2, name(ac_`d'_2_`e')
 26.                 ac rate if `d'==3, name(ac_`d'_3_`e')
 27.                 ac rate if `d'==4, name(ac_`d'_4_`e')
 28.                 ac rate if `d'==5, name(ac_`d'_5_`e')
 29.                 *Partial autoregression plots by ethnicity
.                 pac rate if `d'==1, name(pac_`d'_1_`e')
 30.                 pac rate if `d'==2, name(pac_`d'_2_`e')
 31.                 pac rate if `d'==3, name(pac_`d'_3_`e')
 32.                 pac rate if `d'==4, name(pac_`d'_4_`e')
 33.                 pac rate if `d'==5, name(pac_`d'_5_`e')
 34.                 *Combine Graphs
.                 graph combine kd_`d'_1_`e' kd_`d'_2_`e' kd_`d'_3_`e' kd_`d'_4
> _`e' kd_`d'_5_`e', altshrink
 35.                 graph export ./output/time_series/mh_kd_`c'_`d'.svg, as(sv
> g) replace
 36.                 graph combine ac_`d'_1_`e' ac_`d'_2_`e' ac_`d'_3_`e' ac_`d
> '_4_`e' ac_`d'_5_`e', altshrink
 37.                 graph export ./output/time_series/mh_ac_`c'_`d'.svg, as(sv
> g) replace
 38.                 graph combine pac_`d'_1_`e' pac_`d'_2_`e' pac_`d'_3_`e' pa
> c_`d'_4_`e' pac_`d'_5_`e', altshrink
 39.                 graph export ./output/time_series/mh_pac_`c'_`d'.svg, as(s
> vg) replace
 40.                 }
 41.         }
(6 vars, 600 obs)
(100 observations deleted)
(250 observations deleted)
(2 missing values generated)
       panel variable:  ethnicity (strongly balanced)
        time variable:  month, 2018m3 to 2022m4
                delta:  1 month
(note: time series has 1 gap)
(note: time series has 1 gap)
(note: time series has 1 gap)
(note: time series has 1 gap)
(note: file ./output/time_series/mh_kd_bp_meas_mh_ethnicity.svg not found)
(file ./output/time_series/mh_kd_bp_meas_mh_ethnicity.svg written in SVG format
> )
(note: file ./output/time_series/mh_ac_bp_meas_mh_ethnicity.svg not found)
(file ./output/time_series/mh_ac_bp_meas_mh_ethnicity.svg written in SVG format
> )
(note: file ./output/time_series/mh_pac_bp_meas_mh_ethnicity.svg not found)
(file ./output/time_series/mh_pac_bp_meas_mh_ethnicity.svg written in SVG forma
> t)
(6 vars, 700 obs)
(200 observations deleted)
(250 observations deleted)
(5 missing values generated)
       panel variable:  imd (strongly balanced)
        time variable:  month, 2018m3 to 2022m4
                delta:  1 month
(note: time series has 2 gaps)
(note: time series has 2 gaps)
(note: time series has 2 gaps)
(note: time series has 2 gaps)
(note: file ./output/time_series/mh_kd_bp_meas_mh_imd.svg not found)
(file ./output/time_series/mh_kd_bp_meas_mh_imd.svg written in SVG format)
(note: file ./output/time_series/mh_ac_bp_meas_mh_imd.svg not found)
(file ./output/time_series/mh_ac_bp_meas_mh_imd.svg written in SVG format)
(note: file ./output/time_series/mh_pac_bp_meas_mh_imd.svg not found)
(file ./output/time_series/mh_pac_bp_meas_mh_imd.svg written in SVG format)

. 
. /* Primary and emergency admissions by ethnicity
> local a "depression_primary_admission anxiety_primary_admission smi_primary_a
> dmission self_harm_primary_admission anxiety_emergency smi_emergency self_har
> m_emergency"
> local b "depress anxiety smi sh anx_emergency smi_emergency sh_emergency"
> forvalues i=1/7 {
>         local c: word `i' of `a'
>         local d: word `i' of `b'
>         import delimited "./output/measures/mh/measure_`c'_ethnicity_rate.csv
> ", numericcols(3) clear    //get csv
>         gen temp_date=date(date, "YMD")
>         format temp_date %td
>         gen postcovid=(temp_date>=date("23/03/2020", "DMY"))
>         gen month=mofd(temp_date)
>         format month %tm
>         drop temp_date
>         *Value to rate per 100k
>         gen rate = value*100000
>         label variable rate "Rate of `c' exacerbation per 100,000"
>         *Set time series
>         tsset ethnicity month
>         *Kernel density plots to check for normality and extreme values
>         kdensity rate if ethnicity==1, normal name(kd_ethnic_1_`d')
>         kdensity rate if ethnicity==2, normal name(kd_ethnic_2_`d')
>     kdensity rate if ethnicity==3, normal name(kd_ethnic_3_`d')
>     kdensity rate if ethnicity==4, normal name(kd_ethnic_4_`d')
>     kdensity rate if ethnicity==5, normal name(kd_ethnic_5_`d')
>         *Autoregression plots by ethnicity
>     ac rate if ethnicity==1, name(ac_ethnic_1_`d')
>         ac rate if ethnicity==2, name(ac_ethnic_2_`d')
>     ac rate if ethnicity==3, name(ac_ethnic_3_`d')
>     ac rate if ethnicity==4, name(ac_ethnic_4_`d')
>     ac rate if ethnicity==5, name(ac_ethnic_5_`d')
>         *Partial autoregression plots by ethnicity
>         pac rate if ethnicity==1, name(pac_ethnic_1_`d')
>         pac rate if ethnicity==2, name(pac_ethnic_2_`d')
>     pac rate if ethnicity==3, name(pac_ethnic_3_`d')
>     pac rate if ethnicity==4, name(pac_ethnic_4_`d')
>     pac rate if ethnicity==5, name(pac_ethnic_5_`d')
>         *Combine Graphs
>         graph combine kd_ethnic_1_`d' kd_ethnic_2_`d' kd_ethnic_3_`d' kd_ethn
> ic_4_`d' kd_ethnic_5_`d', altshrink
>         graph export ./output/time_series/mh_kd_`c'_ethnicity.svg, as(svg) re
> place
>         graph combine ac_ethnic_1_`d' ac_ethnic_2_`d' ac_ethnic_3_`d' ac_ethn
> ic_4_`d' ac_ethnic_5_`d', altshrink
>         graph export ./output/time_series/mh_ac_`c'_ethnic.svg, as(svg) repla
> ce
>     graph combine pac_ethnic_1_`d' pac_ethnic_2_`d' pac_ethnic_3_`d' pac_ethn
> ic_4_`d' pac_ethnic_5_`d', altshrink
>         graph export ./output/time_series/checks_pac_`c'_ethnicity.svg, as(sv
> g) replace
>         }
> 
> * Primary and emergency admissions by IMD
> local a "depression_primary_admission anxiety_primary_admission smi_primary_a
> dmission self_harm_primary_admission anxiety_emergency smi_emergency self_har
> m_emergency"
> local b "depress anxiety smi sh anx_emergency smi_emergency sh_emergency"
> forvalues i=1/7 {
>         local c: word `i' of `a'
>         local d: word `i' of `b'
>         import delimited "./output/measures/mh/measure_`c'_imd_rate.csv", num
> ericcols(4) clear  //get csv
>         gen temp_date=date(date, "YMD")
>         format temp_date %td
>         gen postcovid=(temp_date>=date("23/03/2020", "DMY"))
>         gen month=mofd(temp_date)
>         format month %tm
>         drop temp_date
>         *Value to rate per 100k
>         gen rate = value*100000
>         label variable rate "Rate of `c' per 100,000"
>         *Set time series
>         tsset imd month 
>         *Kernel density plots to check for normality and extreme values
>         kdensity rate if imd==1, normal name(kd_imd_1_`d')
>         kdensity rate if imd==2, normal name(kd_imd_2_`d')
>         kdensity rate if imd==3, normal name(kd_imd_3_`d')
>         kdensity rate if imd==4, normal name(kd_imd_4_`d')
>         kdensity rate if imd==5, normal name(kd_imd_5_`d')
>         *Autoregression plots by ethnicity
>         ac rate if imd==1, name(ac_imd_1_`d')
>         ac rate if imd==2, name(ac_imd_2_`d')
>         ac rate if imd==3, name(ac_imd_3_`d')
>         ac rate if imd==4, name(ac_imd_4_`d')
>         ac rate if imd==5, name(ac_imd_5_`d')
>         *Partial autoregression plots by ethnicity
>         pac rate if imd==1, name(pac_imd_1_`d')
>         pac rate if imd==2, name(pac_imd_2_`d')
>         pac rate if imd==3, name(pac_imd_3_`d')
>         pac rate if imd==4, name(pac_imd_4_`d')
>         pac rate if imd==5, name(pac_imd_5_`d')
>         *Combine Graphs
>         graph combine kd_imd_1_`d' kd_imd_2_`d' kd_imd_3_`d' kd_imd_4_`d' kd_
> imd_5_`d', altshrink
>         graph export ./output/time_series/mh_kd_`c'_imd.svg, as(svg) replace
>         graph combine ac_imd_1_`d' ac_imd_2_`d' ac_imd_3_`d' ac_imd_4_`d' ac_
> imd_5_`d', altshrink
>         graph export ./output/time_series/mh_ac_`c'_imd.svg, as(svg) replace
>         graph combine pac_imd_1_`d' pac_imd_2_`d' pac_imd_3_`d' pac_imd_4_`d'
>  pac_imd_5_`d', altshrink
>         graph export ./output/time_series/mh_pac_`c'_imd.svg, as(svg) replace
>         }
> */
. 
. log close
      name:  <unnamed>
       log:  /workspace/logs/model_checks_mh.log
  log type:  text
 closed on:  22 Feb 2023, 10:04:42
-------------------------------------------------------------------------------
